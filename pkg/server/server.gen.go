// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Error defines model for Error.
type Error struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

// VMInfo defines model for VMInfo.
type VMInfo struct {
	Spec VMSpec `json:"spec"`
}

// VMInfos defines model for VMInfos.
type VMInfos = []VMInfo

// VMSpec defines model for VMSpec.
type VMSpec struct {
	Cpu  int    `json:"cpu"`
	Disk int    `json:"disk"`
	Id   int    `json:"id"`
	Ip   string `json:"ip"`
	Name string `json:"name"`
	Ram  int    `json:"ram"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all VMs
	// (GET /v0/vm)
	ListVMs(ctx echo.Context) error
	// Create a VM
	// (POST /v0/vm)
	CreateVM(ctx echo.Context) error
	// Show VM details
	// (GET /v0/vm/{vmId})
	GetVM(ctx echo.Context, vmId int) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListVMs converts echo context to params.
func (w *ServerInterfaceWrapper) ListVMs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListVMs(ctx)
	return err
}

// CreateVM converts echo context to params.
func (w *ServerInterfaceWrapper) CreateVM(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateVM(ctx)
	return err
}

// GetVM converts echo context to params.
func (w *ServerInterfaceWrapper) GetVM(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "vmId" -------------
	var vmId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "vmId", runtime.ParamLocationPath, ctx.Param("vmId"), &vmId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter vmId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVM(ctx, vmId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v0/vm", wrapper.ListVMs)
	router.POST(baseURL+"/v0/vm", wrapper.CreateVM)
	router.GET(baseURL+"/v0/vm/:vmId", wrapper.GetVM)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xUMW/cPAz9KwK/bzRiJ928FUFRHFBPV9xSZGAt3lmJLakS7SYI/N8LSr4muXPaDi2Q",
	"SYZMvvf4SOoRWjd4Z8lyhPoRYtvRgOnzQwguyIcPzlNgQ+m6dZrk5AdPUEPkYOwB5gIGihEPa//mAgJ9",
	"G00gDfWXjPAUf1Mc493XW2pZsHbNxu7dOXn01Mr5f6A91PBf+aS+XKSXu2YrUaesKbWAyMhj/AVp4jFM",
	"Q/w9URIppeP9JmdcVtVPZAwBHzLwdtF9YqUfn7llLNOBgiRoE+/W/xj9yr1f7YnFYb1ZAYc1oBPPjIYF",
	"IzEUSXFOXkSe+ygYZmleb1qyMSnISuC9x7YjdXVRiQo23Mtt46zrDXfXvRuFcqIQjbNQw+VFlUOdJ4ve",
	"QA3v0lUBHrlLNpZTVU6pnAOxHOIxsnF2o6GGTybyromim6J3Nmbzr6oqj7NlsikNve9NmxLL2yj0x334",
	"s0mIuXhNsQ3Gcy5A2JWmvbGklchIEXsce/5r9HlTV8hHS/eeWiataIkpII7DgOHhqA37XmV7GA9Ruj5V",
	"cDMX4F1ccfM6EDLtmnM7L+V4yd/gHSlUgSKFKWEodqpNEGrXvCUvcl0KVSrthRVzsYxY+TgNGz2/Omkf",
	"iVO2x4ADMQXBOPXkc0fKaOX2ijsxQRwJxMHQlNZMYmS0j5tXg5DC88XkMFLxzI+zLb7557O+5rA8cgqt",
	"Vtv0xj6V+Jb6vO3cd3FdE6Pp08rOPwIAAP//8oQrZwUHAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
